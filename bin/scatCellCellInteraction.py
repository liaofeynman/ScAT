import os
import subprocess
import argparse

"""
Created on August 2021
@email: liaoshangfeng@genomics.cn
"""


def get_r_script():
    r_script = os.path.join(os.path.dirname(__file__), "R/CCI_cellchat_v1.R")
    return r_script


def make_dir(path):
    if(os.path.exists(path) and os.path.isdir(path)):
        pass
    else:
        os.makedirs(path)


def CellCellInteractionParser(subparsers):
    workflow = subparsers.add_parser('CellCellInteraction', help='Perform cell-cell communication analysis by CellChat')

    group_input = workflow.add_argument_group("input arguments")
    group_input.add_argument('--Rscript',type=str,required=True,default=None,help='Rscript path (default: %(default)s)')
    group_input.add_argument('--input', dest='input', type=str, required=True, default=None, help='Input raw data file (*.txt.gz)') ## should also support seurat data
    group_input.add_argument('--species', dest='species', type=str, default='Human', choices=['Human', 'Mouse'], help='Species name (default: %(default)s)')
    group_input.add_argument('--meta', dest='meta', type=str, required=True, help='Cell labels (Recommand the cell types results generated by Annotation module (default: %(default)s)')
    
    group_output = workflow.add_argument_group("output arguments")
    group_output.add_argument('--out', dest='out', type=str, required=True, default=None, help='Directory to save file')
    group_output.add_argument('--prefix', type=str, default='sample', help='Sample ID, will be used as output prefix and seuratObj ident')


def CellCellInteraction(args):
    make_dir(args.out)
    r_script = get_r_script()
    commands = [args.Rscript, r_script]
    rscript_args = [
        "--input", args.input,
        "--meta", args.meta,
        "--prefix", args.prefix,
        "--out", args.out]
    if args.species:
        rscript_args.extend(["--species", args.species])

    commands.extend(rscript_args)
    print(args)
    subprocess.run([str(i) for i in commands])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='ScAT', description='ScAT - a python xxxxxxxxxxxxxxxxxx',
                                  epilog='Use %(prog)s {command} -h to get help on individual commands')

    subparsers = parser.add_subparsers(dest = "subcommand")
    CellCellInteractionParser(subparsers)
    args = parser.parse_args()
    CellCellInteraction(args)
