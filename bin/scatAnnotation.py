import sys
import os
import subprocess
import argparse

"""
Created on August 2021
@email: liaoshangfeng@genomics.cn
"""

def make_dir(path):
    if(os.path.exists(path) and os.path.isdir(path)):
        pass
    else:
        os.makedirs(path)
        
        
def get_r_script():
    r_script = os.path.join(os.path.dirname(__file__), "R/annotation_SingleR_v1.R")
    return r_script

def get_ref_path(ref_name):
    database = [
        'BlueprintEncodeData',
        'DatabaseImmuneCellExpressionData',
        'HumanPrimaryCellAtlasData',
        'ImmGenData',
        'MonacoImmuneData',
        'MouseRNAseqData',
        'NovershternHematopoieticData']

    if ref_name in database:
        current_path = os.path.dirname(__file__)
        # db_path = current_path.strip("bin") + "docs/celldex/"
        db_path = os.path.join(os.path.dirname(os.path.abspath('')), "docs/celldex/")
        
        ref = os.path.join(db_path, ref_name + '.rds')
        ref_col = os.path.join(db_path, ref_name + '_coldata.rds')
        return(ref, ref_col)
    else:
        parser.print_help(sys.stderr)
        print("ref_name should be selected from following: {database}\n".format(database="\t".join(database)))
        sys.exit(1)


def AnnotationParser(subparsers):
    workflow = subparsers.add_parser("Annotation", help = "Perform cell annotation by SingleR")

    group_input = workflow.add_argument_group("input arguments")
    group_input.add_argument('--Rscript',type=str,required=True,default=None,help='Rscript path (default: %(default)s)')
    group_input.add_argument('--input', dest='input', type=str, required=True, default=None, help='Input normalized data (*txt.gz)')
    group_input.add_argument('--ref_name', dest='ref_name', type=str, default='HumanPrimaryCellAtlasData', choices=['BlueprintEncodeData', 'DatabaseImmuneCellExpressionData', 'HumanPrimaryCellAtlasData', 'ImmGenData','MonacoImmuneData','MouseRNAseqData', 'NovershternHematopoieticData'],help='Ref database name (default: %(default)s)')

    group_input.add_argument('--cluster', dest='cluster', type=str, default=None, help='cluster file generated by Seurat workflow (default: %(default)s)')

    group_output = workflow.add_argument_group("output arguments")
    group_output.add_argument('--out',type=str,required=True,default=None,help='Directory to save file')
    group_output.add_argument('--prefix', dest='prefix', type=str, default='sample', help='sample ID, will be used as output file prefix (default: %(default)s)')


def Annotation(args):
    ref, ref_col = get_ref_path(args.ref_name)
    make_dir(args.out)
    r_script = get_r_script()
    commands = [args.Rscript, r_script]
    rscript_args = [
        "-i", args.input,
        "-o", args.out,
        "--prefix", args.prefix,
        "--ref", ref,
        "--ref_col", ref_col]

    if args.cluster:
        rscript_args.extend(["--cluster", args.cluster])

    commands.extend(rscript_args)
    subprocess.run([str(i) for i in commands])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='ScAT', description='ScAT - a python xxxxxxxxxxxxxxxxxx',
                                  epilog='Use %(prog)s {command} -h to get help on individual commands')

    subparsers = parser.add_subparsers(dest = "subcommand")
    AnnotationParser(subparsers)
    args = parser.parse_args()
    Annotation(args)
